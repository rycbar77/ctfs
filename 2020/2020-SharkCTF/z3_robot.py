from z3 import *

a1 = []
for i in range(25):
    a1.append(BitVec("s%d" % i, 32))

solver = Solver()

solver.add((a1[20] ^ 0x2B) == a1[7])
solver.add(a1[21] - a1[3] == -20)
solver.add((a1[2] >> 6) == 0)
solver.add(a1[13] == 116)
solver.add(4 * a1[11] == 380)
solver.add(a1[7] >> a1[17] % 8 == 5)
solver.add((a1[6] ^ 0x53) == a1[14])
solver.add(a1[8] == 122)
solver.add(a1[5] << a1[9] % 8 == 392)
solver.add(a1[16] - a1[7] == 20)
solver.add(a1[7] << a1[23] % 8 == 190)
solver.add(a1[2] - a1[7] == -43)
solver.add(a1[21] == 95)
solver.add((a1[2] ^ 0x47) == a1[3])
solver.add(a1[0] == 99)
solver.add(a1[13] == 116)
solver.add((a1[20] & 0x45) == 68)
solver.add((a1[8] & 0x15) == 16)
solver.add(a1[12] == 95)
solver.add(a1[4] >> 4 == 7)
solver.add(a1[13] == 116)
solver.add(a1[0] >> a1[0] % 8 == 12)
solver.add(a1[10] == 95)
solver.add((a1[8] & 0xAC) == 40)
solver.add(a1[16] == 115)
solver.add((a1[22] & 0x1D) == 24)
solver.add(a1[9] == 51)
solver.add(a1[5] == 49)
solver.add(4 * a1[19] == 456)
solver.add(a1[20] >> 6 == 1)
solver.add(a1[7] >> 1 == 47)
solver.add(a1[1] == 108)
solver.add(a1[3] >> 4 == 7)
solver.add((a1[19] & 0x49) == 64)
solver.add(a1[4] == 115)
solver.add((a1[2] & a1[11]) == 20)
solver.add(a1[0] == 99)
solver.add(a1[4] + a1[5] == 164)
solver.add(a1[15] << 6 == 6080)
solver.add((a1[10] ^ 0x2B) == a1[17])
solver.add((a1[12] ^ 0x2C) == a1[4])
solver.add(a1[19] - a1[21] == 19)
solver.add(a1[12] == 95)
solver.add(a1[15] >> 1 == 47)
solver.add(a1[19] == 114)
solver.add(a1[17] + a1[18] == 168)
solver.add(a1[22] == 58)
solver.add((a1[23] & a1[21]) == 9)
solver.add(a1[6] << a1[19] % 8 == 396)
solver.add(a1[3] + a1[7] == 210)
solver.add((a1[22] & 0xED) == 40)
solver.add((a1[12] & 0xAC) == 12)
solver.add((a1[18] ^ 0x6B) == a1[15])
solver.add((a1[16] & 0x7A) == 114)
solver.add((a1[0] & 0x39) == 33)
solver.add((a1[6] ^ 0x3C) == a1[21])
solver.add(a1[20] == 116)
solver.add(a1[19] == 114)
solver.add(a1[12] == 95)
solver.add(a1[2] == 52)
solver.add(a1[23] == 41)
solver.add(a1[10] == 95)
solver.add((a1[22] & a1[9]) == 50)
solver.add(a1[3] + a1[2] == 167)
solver.add(a1[17] - a1[14] == 68)
solver.add(a1[21] == 95)
solver.add((a1[19] ^ 0x2D) == a1[10])
solver.add(4 * a1[12] == 380)
solver.add(a1[6] & 0x40 != 0)
solver.add((a1[12] & a1[22]) == 26)
solver.add(a1[7] << a1[19] % 8 == 380)
solver.add((a1[20] ^ 0x4E) == a1[22])
solver.add(a1[6] == 99)
solver.add(a1[12] == a1[7])
solver.add(a1[19] - a1[13] == -2)
solver.add(a1[14] >> 4 == 3)
solver.add((a1[12] & 0x38) == 24)
solver.add(a1[8] << a1[10] % 8 == 15616)
solver.add(a1[20] == 116)
solver.add(a1[6] >> a1[22] % 8 == 24)
solver.add(a1[22] - a1[5] == 9)
solver.add(a1[7] << a1[22] % 8 == 380)
solver.add(a1[22] == 58)
solver.add(a1[16] == 115)
solver.add((a1[23] ^ 0x1D) == a1[18])
solver.add(a1[23] + a1[14] == 89)
solver.add((a1[5] & a1[2]) == 48)
solver.add((a1[15] & 0x9F) == 31)
solver.add(a1[4] == 115)
solver.add((a1[23] ^ 0x4A) == a1[0])
solver.add((a1[6] ^ 0x3C) == a1[11])
flag = ""
if solver.check() == sat:
    r = solver.model()
    for i in range(24):
        flag += chr(r[a1[i]].as_long() & 0xff)
print(flag)
